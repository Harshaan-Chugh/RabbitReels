services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: rabbitreels
      POSTGRES_USER: rabbitreels
      POSTGRES_PASSWORD: IjnxShgB1CfpKs0Oj9gpMn2rmWJ2siS5LRsASUPQLx0=
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rabbitreels} -d ${POSTGRES_DB:-rabbitreels}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - rabbitreels-network

  # Redis for caching and job status
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --save 60 1000
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - rabbitreels-network

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
      PYTHONUNBUFFERED: "1"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - rabbitreels-network

  # API Gateway
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    ports:
      - "8080:8080"
    env_file: .env
    environment:
      PYTHONUNBUFFERED: "1"
      ENVIRONMENT: development
      SESSION_SECRET: "58580CB34074EA82F892B1BD7ABA6400D50DA3B0F2F4B0C9DE321B776E287EE2"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - videos-data:/app/data/videos
    restart: unless-stopped
    networks:
      - rabbitreels-network

  # Next.js Frontend
  web:
    build:
      context: .
      dockerfile: web/Dockerfile
    ports:
      - "80:80"
    env_file: .env
    environment:
      NEXT_PUBLIC_API_BASE: http://localhost
      ENVIRONMENT: development
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - rabbitreels-network

  # Script Generator Worker
  script-generator:
    build:
      context: .
      dockerfile: scripts-generator/Dockerfile
    env_file: .env
    environment:
      PYTHONUNBUFFERED: "1"
      ENVIRONMENT: development
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: on-failure
    networks:
      - rabbitreels-network

  # Video Creator Worker
  video-creator:
    build:
      context: .
      dockerfile: video-creator/Dockerfile
    env_file: .env
    environment:
      PYTHONUNBUFFERED: "1"
      ENVIRONMENT: development
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - videos-data:/app/data/videos
    restart: on-failure
    networks:
      - rabbitreels-network

  # Publisher Worker (Optional)
  publisher:
    build:
      context: .
      dockerfile: publisher/Dockerfile
    env_file: .env
    environment:
      PYTHONUNBUFFERED: "1"
      ENVIRONMENT: development
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - videos-data:/app/data/videos
    restart: on-failure
    networks:
      - rabbitreels-network
    profiles:
      - publisher

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  videos-data:
    driver: local

networks:
  rabbitreels-network:
    driver: bridge 